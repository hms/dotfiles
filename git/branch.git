[alias]
  c = checkout
  # cp = checkout --patch
  # checkout pull-request.  This assumes pull requests exist as refs under
  # refs/pull/<n>
  # cpr = "!f() { git checkout -b pull/$1 pull-requests/$1; }; f"

  b = branch
  br = branch -r
  #   backup = "!f() { local name=`git name-rev HEAD | cut -d' ' -f 2`; git branch -D \"backup/$name\" 2> /dev/null; git branch \"backup/$name\"; }; f"

  branch-current = "!f() { git branch --no-color | grep '*' | grep -v '(no branch)' | cut -c 3-; }; f"

  #   wm = !sh -c 'git merge $0 && git branch -d $0'
  #   ff = merge --ff-only

  # Rebase remote (origin/master) interactive
  #  rri = "!f() { git fetch origin && git rebase --autosquash --interactive origin/master \"$@\"; }; f"
  # Rebase fork-point
  #  rrf = "!f() { git rebase --autosquash --interactive `git fpm` \"$@\"; }; f"
  # rc = rebase --continue

  # Depends on git-cleanup-my-branches
  # cu = cleanup-my-branches

  # branch age
  lb = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf(\"  \\033[33m%s: \\033[37m %s\\033[0m\\n\", substr($2, 1, length($2)-1), $1)}'

  # branch by age
  ba = branch --sort=-committerdate --format="%(committerdate:relative)%09%(refname:short)"


[branch]
  # always rebase to tracked branches on pull, for branches created by
  # `git branch` or `git checkout`, i.e. non-master.
  autosetuprebase = always

[rebase]
	autosquash = true
[rerere]
	enabled = 1
[merge]
	tool = p4mergetool
[mergetool "p4mergetool"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $PWD/$BASE $PWD/$LOCAL $PWD/$REMOTE $PWD/$MERGED
	trustExitCode = false
[mergetool]
	keepBackup = false
[diff]
	tool = p4mergetool
[difftool "p4mergetool"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $LOCAL $REMOTE

# vim:ft=gitconfig:
